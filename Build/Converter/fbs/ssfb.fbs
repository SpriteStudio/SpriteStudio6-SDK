namespace ss.ssfb;

file_identifier "SSFB";

// Animation Part Type
enum SsPartType:byte {
  Invalid = -1,
  Nulltype = 0,
  Normal,
  Text,
  Instance,
  Armature,
  Effect,
  Mesh,
  Movenode,
  Constraint,
  Mask,
  Joint,
  Bonepoint,
}

enum PartFlag:uint (bit_flags) {
  Invisible,
  FlipH,
  FlipV,
  CellIndex,
  PositionX,
  PositionY,
  PositionZ,
  PivotX,
  PivotY,
  RotationX,
  RotationY,
  RotationZ,
  ScaleX,
  ScaleY,
  LocalScaleX,
  LocalScaleY,
  Opacity,
  LocalOpacity,
  PartsColor,
  VertexTransform,
  SizeX,
  SizeY,
  UMove,
  VMove,
  UvRotation,
  UScale,
  VScale,
  BoundingRadius,
  Mask,
  Priority,
  InstanceKeyframe,
  EffectKeyframe,
}

enum PartFlag2:uint (bit_flags) {
  MeshData,
}

enum VertexFlag:ubyte (bit_flags) {
  LT,
  RT,
  LB,	
  RB,	
  ONE,
}

enum InstanceLoopFlag:ubyte (bit_flags) {
  Infinity,
  Reverse,
  PingPong,
  Independent,
}

enum EffectLoopFlag:ubyte (bit_flags) {
  Independent,
}

enum UserDataFlag:ubyte (bit_flags) {
  Integer,
  Rect,
  Point,
  String,
}

enum SsEffectFunctionType:ubyte {
  Base,
  Basic,
  RndSeedChange,
  Delay,
  Gravity,
  Position,
  //TransPosition,
  Rotation,
  TransRotation,
  TransSpeed,
  TangentialAcceleration,
  InitColor,
  TransColor,
  AlphaFade,
  Size,
  TransSize,
  PointGravity,
  TurnToDirectionEnabled,
  InfiniteEmitEnabled,
}

enum EffectBehaviorFlags:uint (bit_flags) {
  Base,
  Basic,
  RndSeedChange,
  Delay,
  Gravity,
  Position,
  //TransPosition,
  Rotation,
  TransRotation,
  TransSpeed,
  TangentialAcceleration,
  InitColor,
  TransColor,
  AlphaFade,
  Size,
  TransSize,
  PointGravity,
  TurnToDirectionEnabled,
  InfiniteEmitEnabled,
}

enum EffectNodeType:byte {
  Invalid = -1,
  Root,
  Emitter,
  Particle,
}

enum EffectRenderBlendType:byte {
  Invalid = -1,
  Mix,
  Add,
}

struct EffectParticleElementBasic {
  ss_effect_function_type:int;
  
  priority:int;
  maximum_particle:int;
  attime_create:int;
  interval:int;
  lifetime:int;
  speed_min_value:float;
  speed_max_value:float;
  lifespan_min_value:int;
  lifespan_max_value:int;
  angle:float;
  angle_variance:float;
}

table EffectNode {
  array_index:short;
  parent_index:short;
  type:EffectNodeType;
  cell_index:short;	
  blend_type:EffectRenderBlendType;
  basic_behavior:EffectParticleElementBasic;
  behavior_flags:EffectBehaviorFlags;

  // RndSeedChange
  seed:int;
  // Delay
  delay_time:int;
  // Gravity
  gravity_x:float;
  gravity_y:float;
  // Position
  offset_x_min_value:float;
  offset_x_max_value:float;
  offset_y_min_value:float;
  offset_y_max_value:float;
  // Rotation
  rotation_min_value:float;
  rotation_max_value:float;
  rotation_add_min_value:float;
  rotation_add_max_value:float;
  // TransRotation
  rotation_factor:float;
  end_life_time_per:float;
  // TrannsSeed
  speed_min_value:float;
  speed_max_value:float;
  // TangentialAcceleration
  acceleration_min_value:float;
  acceleration_max_value:float;
  // InitColor
  init_color_min_value:uint;
  init_color_max_value:uint;
  // TransColor
  trans_color_min_value:uint;
  trans_color_max_value:uint;
  // AlphaFade
  disprange_min_value:float;
  disprange_max_value:float;
  // Size
  size_x_min_value:float;
  size_x_max_value:float;
  size_y_min_value:float;
  size_y_max_value:float;
  scale_factor_min_value:float;
  scale_factor_max_value:float;
  // TransSize
  trans_size_x_min_value:float;
  trans_size_x_max_value:float;
  trans_size_y_min_value:float;
  trans_size_y_max_value:float;
  trans_scale_factor_min_value:float;
  trans_scale_factor_max_value:float;
  // PointGravity
  point_gravity_position_x:float;
  point_gravity_position_y:float;
  point_gravity_power:float;
  // TurnToDirectionEnabled
  rotation:float;
  // InfiniteEmitEnabled
  infinitie_emit_flag:int;
}

table EffectFile {
  name:string;
  fps:short;
  is_lock_rand_seed:short;
  lock_rand_seed:short;
  layout_scale_x:short;
  layout_scale_y:short;
  num_node_list:short;
  effect_node:[EffectNode];
}

enum TexWrapMode:byte {
  invalid = -1,
  clamp,
  repeat,
  mirror,
}

enum TexFilterMode:byte {
  invalid = -1,
  nearlest,
  linear,
}

table CellMap {
  name:string;
  image_path:string;
  index:short;
  wrap_mode:TexWrapMode;
  filter_mode:TexFilterMode;
}

table Cell {
  name:string;
  cell_map:CellMap;
  index_in_cell_map:short;
  x:short;
  y:short;
  width:short;
  height:short;
  pivot_x:float;
  pivot_y:float;
  u1:float;
  v1:float;
  u2:float;
  v2:float;
}

table MeshDataUV {
  uv:[float];
}
table MeshDataIndices {
  indices:[float];
}

table PartState {
  index:short;
  flag1:PartFlag;
  flag2:PartFlag2;
  data:[uint];
}

table FrameDataIndex {
  states:[PartState];
}

table UserDataItem {
  flags:UserDataFlag;
  array_index:short;
  integer:int;
  rect_x:int;
  rect_y:int;
  rect_w:int;
  rect_h:int;
  point_x:int;
  point_y:int;
  user_string_length:int;
  user_string:string;
}

table UserDataPerFrame {
  frame_index:short;
  data:[UserDataItem];
}

table LabelDataItem {
  label:string;
  frame_index:short;
}

table AnimationData {
  name:string;
  default_data:[AnimationInitialData];
  frame_data:[FrameDataIndex];
  user_data:[UserDataPerFrame];
  label_data:[LabelDataItem];
  meshs_data_UV:[MeshDataUV];
  meshs_data_indices:[MeshDataIndices];
  start_frames:short;
  end_frames:short;
  total_frames:short;
  fps:short;
  labelNum:short;
  canvas_size_w:short;
  canvas_size_h:short;
  canvas_pvot_x:float;
  canvas_pvot_y:float;
}

table AnimationInitialData {
  index:short;
  lowflag:int;
  highflag:int;
  priority:short;
  cell_index:short;
  opacity:short;
  local_opacity:short;
  masklimen:short;
  position_x:float;
  position_y:float;
  position_z:float;
  pivot_x:float;
  pivot_y:float;
  rotation_x:float;
  rotation_y:float;
  rotation_z:float;
  scale_x:float;
  scale_y:float;
  local_scale_x:float;
  local_scale_y:float;
  size_x:float;
  size_y:float;
  uv_move_x:float;
  uv_move_y:float;
  uv_rotation:float;
  uv_scale_x:float;
  uv_scale_y:float;
  bounding_radius:float;
  instance_value_cur_keyframe:int;
  instance_value_start_frame:int;
  instance_value_end_frame:int;
  instance_value_loop_num:int;
  instance_value_speed:float;
  instance_value_loop_flag:int;
  effect_value_cur_keyframe:int;
  effect_value_start_time:int;
  effect_value_speed:float;
  effect_value_loop_flag:int;
}

enum BoundsType:byte {
  invalid = -1,
  none,
  quad,
  aabb,
  circle,
  circle_smin,
  circle_smax,
}

enum BlendType:byte {
  invalid=-1,
  mix,
  mul,
  add,
  sub,
  mulalpha,
  screen,
  exclusion,
  invert,
}

table PartData {
  name:string;
  index:short;
  parent_index:short;
  type:SsPartType;
  bounds_type:BoundsType;
  alpha_blend_type:BlendType;
  refname:string;
  effectfilename:string;
  colorLabel:string;
  mask_influence:bool;
}

table AnimePackData {
  name:string;
  parts:[PartData];
  animations:[AnimationData];
}

table ProjectData {
  dataId:uint;
  version:uint;
  image_base_dir:string;
  cells:[Cell];
  anime_packs:[AnimePackData];
  effect_file_list:[EffectFile];
  num_cells:short;
  num_animePacks:short;
  num_effectFileList:short;
}

root_type ProjectData;
