namespace ss.ssfb;

file_identifier "SSFB";

// Animation Part Type
enum SsPartType:byte {
  Invalid = -1,
  Nulltype = 0,
  Normal,
  Text,
  Instance,
  Armature,
  Effect,
  Mesh,
  Movenode,
  Constraint,
  Mask,
  Joint,
  Bonepoint,
}

enum PartFlag:uint (bit_flags) {
  Invisible,
	FlipH,
	FlipV,
	CellIndex,
	PositionX,
	PositionY,
	PositionZ,
	PivotX,
	PivotY,
	RotationX,
	RotationY,
	RotationnZ,
	ScaleX,
	ScaleY,
	LocalScaleX,
	LocalScaleY,
	Opacity,
	LocalOpacity,
	PartsColor,
	VertexTransform,
	SizeX,
	SizeY,
	UMove,
	VMove,
	UvRotation,
	UScale,
	VScale,
	BoundingRadius,
	Mask,
	Priority,
	InstanceKeyframe,
	EffectKeyframe,
}

enum PartFlag2:uint (bit_flags) {
  MeshData,
}

enum VertexFlag:ubyte (bit_flags) {
  LT,
  RT,
  LB,	
  RB,	
  ONE,
}

enum InstanceLoopFlag:ubyte (bit_flags) {
  Infinity,
  Reverse,
  PingPong,
  Independent,
}

enum UserDataFlag:ubyte (bit_flags) {
  Integer,
  Rect,
  Point,
  String,
}

enum EffectNodeType:byte {
  Invalid = -1,
  Root,
  Emitter,
  Particle,
}

enum EffectRenderBlendType:byte {
  Invalid = -1,
  Mix,
  Add,
}

struct EffectParticleInfiniteEmitEnabled {
  flag:int;
}

struct EffectParticleTurnToDirectionEnabled {
  rotation:float;
}

struct EffectParticlePointGravity {
  position_x:float;
  position_y:float;
  power:float;
}

struct EffectParticleElementTransSize {
  size_x_min_value:float;
  size_x_max_value:float;
  size_y_min_value:float;
  size_y_max_value:float;
  scale_factor_min_value:float;
  scale_factor_max_value:float;
}

struct EffectParticleElementSize {
  size_x_min_value:float;
  size_x_max_value:float;
  size_y_min_value:float;
  size_y_max_value:float;
  scale_factor_min_value:float;
  scale_factor_max_value:float;
}

struct EffectParticleElementAlphaFade {
  disprange_min_value:float;
  disprange_max_value:float;
}

struct EffectParticleElementTransColor {
  color_min_value:uint;
  color_max_value:uint;
}

struct EffectParticleElementInitColor {
  color_min_value:uint;
  color_max_value:uint;
}

struct EffectParticleElementTangentialAcceleration {
  acceleration_min_value:float;
  acceleration_max_value:float;
}

struct EffectParticleElementTransSpeed {
  speed_min_value:float;
  speed_max_value:float;
}

struct EffectParticleElementRotationTrans {
  rotation_factor:float;
  end_life_time_per:float;
}

struct EffectParticleElementRotation {
  rotation_min_value:float;
  rotation_max_value:float;
  rotation_add_min_value:float;
  rotation_add_max_value:float;
}

struct EffectParticleElementPosition {
  offset_x_min_value:float;
  offset_x_max_value:float;
  offset_y_min_value:float;
  offset_y_max_value:float;
}

struct EffectParticleElementGravity {
  gravity_x:float;
  gravity_y:float;
}

struct EffectParticleElementDelay {
  delay_time:int;
}

struct EffectParticleElementRndSeedChange {
  seed:int;
}

struct EffectParticleElementBasic {
  ss_effect_function_type:int;
  
  priority:int;
  maximum_particle:int;
  attime_create:int;
  interval:int;
  lifetime:int;
  speed_min_value:float;
  speed_max_value:float;
  lifespan_min_value:int;
  lifespan_max_value:int;
  angle:float;
  angle_variance:float;
}

union EffectNodeBehavior {
  EffectParticleElementBasic,
  EffectParticleElementRndSeedChange,
  EffectParticleElementDelay,
  EffectParticleElementGravity,
  EffectParticleElementPosition,
  EffectParticleElementRotation,
  EffectParticleElementRotationTrans,
  EffectParticleElementTransSpeed,
  EffectParticleElementTangentialAcceleration,
  EffectParticleElementInitColor,
  EffectParticleElementTransColor,
  EffectParticleElementAlphaFade,
  EffectParticleElementSize,
  EffectParticleElementTransSize,
  EffectParticlePointGravity,
  EffectParticleTurnToDirectionEnabled,
  EffectParticleInfiniteEmitEnabled,
}

table EffectNode {
  array_index:short;
  parent_index:short;
  type:EffectNodeType;
  cell_index:short;	
  blend_type:EffectRenderBlendType;
  num_behavior:short;
  behavior:[EffectNodeBehavior];
}

table EffectFile {
  name:string;
  fps:short;
  is_lock_rand_seed:short;
  lock_rand_seed:short;
  layout_scale_x:short;
  layout_scale_y:short;
  num_node_list:short;
  effect_node:[EffectNode];
}

table CellMap {
  name:string;
  image_path:string;
  index:short;
  wrap_mode:short;
  filter_mode:short;
}

table Cell {
  name:string;
  cell_map:CellMap;
  index_in_cell_map:short;
  x:short;
  y:short;
  width:short;
  height:short;
  pivot_x:float;
  pivot_y:float;
  u1:float;
  v1:float;
  u2:float;
  v2:float;
}

table MeshDataUV {
  uv:[float];
}
table MeshDataIndices {
  indices:[float];
}

table PartState {
  index:short;
  flag1:uint;
  flag2:uint;
  data:[uint];
}

table FrameDataIndex {
  states:[PartState];
}

struct UserDataInteger {
  integer:int;
}

struct UserDataRect {
  x:int;
  y:int;
  w:int;
  h:int;
}

struct UserDataPoint {
  x:int;
  y:int;
}

table UserDataString {
  length:int;
  data:string;
}

union UserDataValue {
  UserDataInteger,
  UserDataRect,
  UserDataPoint,
  UserDataString,
}

table UserDataItem {
  flags:UserDataFlag;
  array_index:short;
  data:[UserDataValue];
}

table UserDataPerFrame {
  frame_index:short;
  data:[UserDataItem];
}

table LabelDataItem {
  label:string;
  frame_index:short;
}

table AnimationData {
  name:string;
  default_data:[AnimationInitialData];
  frame_data:[FrameDataIndex];
  user_data:[UserDataPerFrame];
  label_data:[LabelDataItem];
  meshs_data_UV:[MeshDataUV];
  meshs_data_indices:[MeshDataIndices];
  start_frames:short;
  end_frames:short;
  total_frames:short;
  fps:short;
  labelNum:short;
  canvas_size_w:short;
  canvas_size_h:short;
  canvas_pvot_x:float;
  canvas_pvot_y:float;
}

table AnimationInitialData {
  index:short;
  lowflag:int;
  highflag:int;
  priority:short;
  cell_index:short;
  opacity:short;
  local_opacity:short;
  masklimen:short;
  position_x:float;
  position_y:float;
  position_z:float;
  pivot_x:float;
  pivot_y:float;
  rotation_x:float;
  rotation_y:float;
  rotation_z:float;
  scale_x:float;
  scale_y:float;
  local_scale_x:float;
  local_scale_y:float;
  size_x:float;
  size_y:float;
  uv_move_x:float;
  uv_move_y:float;
  uv_rotation:float;
  uv_scale_x:float;
  uv_scale_y:float;
  bounding_radius:float;
  instance_value_cur_keyframe:int;
  instance_value_start_frame:int;
  instance_value_end_frame:int;
  instance_value_loop_num:int;
  instance_value_speed:float;
  instance_value_loop_flag:int;
  effect_value_cur_keyframe:int;
  effect_value_start_time:int;
  effect_value_speed:float;
  effect_value_loop_flag:int;
}


table PartData {
  name:string;
  index:short;
  parent_index:short;
  type:SsPartType;
  bounds_type:short;
  alpha_blend_type:short;
  refname:string;
  effectfilename:string;
  colorLabel:string;
  mask_influence:short;    
}

table AnimePackData {
  name:string;
  parts:[PartData];
  animations:[AnimationData];
}

table ProjectData {
  dataId:uint;
  version:uint;
  flags:int;
  image_base_dir:string;
  cells:[Cell];
  anime_packs:[AnimePackData];
  effect_file_list:[EffectFile];
  num_cells:short;
  num_animePacks:short;
  num_effectFileList:short;
}

root_type ProjectData;
